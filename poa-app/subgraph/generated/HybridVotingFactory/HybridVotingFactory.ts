// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class HybridVotingContractCreated extends ethereum.Event {
  get params(): HybridVotingContractCreated__Params {
    return new HybridVotingContractCreated__Params(this);
  }
}

export class HybridVotingContractCreated__Params {
  _event: HybridVotingContractCreated;

  constructor(event: HybridVotingContractCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get hybridVotingAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get POname(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class HybridVotingFactory extends ethereum.SmartContract {
  static bind(address: Address): HybridVotingFactory {
    return new HybridVotingFactory("HybridVotingFactory", address);
  }

  allHybridVotings(param0: BigInt): Address {
    let result = super.call(
      "allHybridVotings",
      "allHybridVotings(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_allHybridVotings(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allHybridVotings",
      "allHybridVotings(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHybridVotingAddress(index: BigInt): Address {
    let result = super.call(
      "getHybridVotingAddress",
      "getHybridVotingAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_getHybridVotingAddress(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getHybridVotingAddress",
      "getHybridVotingAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHybridVotingCount(): BigInt {
    let result = super.call(
      "getHybridVotingCount",
      "getHybridVotingCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getHybridVotingCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHybridVotingCount",
      "getHybridVotingCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class CreateHybridVotingCall extends ethereum.Call {
  get inputs(): CreateHybridVotingCall__Inputs {
    return new CreateHybridVotingCall__Inputs(this);
  }

  get outputs(): CreateHybridVotingCall__Outputs {
    return new CreateHybridVotingCall__Outputs(this);
  }
}

export class CreateHybridVotingCall__Inputs {
  _call: CreateHybridVotingCall;

  constructor(call: CreateHybridVotingCall) {
    this._call = call;
  }

  get _ParticipationToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _DemocracyToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _nftMembership(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _allowedRoleNames(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get _quadraticVotingEnabled(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _democracyVoteWeight(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _participationVoteWeight(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _treasuryAddress(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get POname(): string {
    return this._call.inputValues[8].value.toString();
  }
}

export class CreateHybridVotingCall__Outputs {
  _call: CreateHybridVotingCall;

  constructor(call: CreateHybridVotingCall) {
    this._call = call;
  }
}
