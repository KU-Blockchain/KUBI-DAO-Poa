// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ElectionContractCreated extends ethereum.Event {
  get params(): ElectionContractCreated__Params {
    return new ElectionContractCreated__Params(this);
  }
}

export class ElectionContractCreated__Params {
  _event: ElectionContractCreated;

  constructor(event: ElectionContractCreated) {
    this._event = event;
  }

  get electionContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftMembershipAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get votingContractAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get POname(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class ElectionContractFactory extends ethereum.SmartContract {
  static bind(address: Address): ElectionContractFactory {
    return new ElectionContractFactory("ElectionContractFactory", address);
  }

  createElectionContract(
    _nftMembership: Address,
    _votingContractAddress: Address,
    POname: string,
  ): Address {
    let result = super.call(
      "createElectionContract",
      "createElectionContract(address,address,string):(address)",
      [
        ethereum.Value.fromAddress(_nftMembership),
        ethereum.Value.fromAddress(_votingContractAddress),
        ethereum.Value.fromString(POname),
      ],
    );

    return result[0].toAddress();
  }

  try_createElectionContract(
    _nftMembership: Address,
    _votingContractAddress: Address,
    POname: string,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createElectionContract",
      "createElectionContract(address,address,string):(address)",
      [
        ethereum.Value.fromAddress(_nftMembership),
        ethereum.Value.fromAddress(_votingContractAddress),
        ethereum.Value.fromString(POname),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateElectionContractCall extends ethereum.Call {
  get inputs(): CreateElectionContractCall__Inputs {
    return new CreateElectionContractCall__Inputs(this);
  }

  get outputs(): CreateElectionContractCall__Outputs {
    return new CreateElectionContractCall__Outputs(this);
  }
}

export class CreateElectionContractCall__Inputs {
  _call: CreateElectionContractCall;

  constructor(call: CreateElectionContractCall) {
    this._call = call;
  }

  get _nftMembership(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _votingContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get POname(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CreateElectionContractCall__Outputs {
  _call: CreateElectionContractCall;

  constructor(call: CreateElectionContractCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
