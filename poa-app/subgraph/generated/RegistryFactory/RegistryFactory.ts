// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RegistryCreated extends ethereum.Event {
  get params(): RegistryCreated__Params {
    return new RegistryCreated__Params(this);
  }
}

export class RegistryCreated__Params {
  _event: RegistryCreated;

  constructor(event: RegistryCreated) {
    this._event = event;
  }

  get newRegistryAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get POname(): string {
    return this._event.parameters[1].value.toString();
  }

  get logoURL(): string {
    return this._event.parameters[2].value.toString();
  }

  get VotingControlAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get contractNames(): Array<string> {
    return this._event.parameters[4].value.toStringArray();
  }

  get contractAddresses(): Array<Address> {
    return this._event.parameters[5].value.toAddressArray();
  }
}

export class RegistryFactory extends ethereum.SmartContract {
  static bind(address: Address): RegistryFactory {
    return new RegistryFactory("RegistryFactory", address);
  }

  createRegistry(
    _VotingControlAddress: Address,
    contractNames: Array<string>,
    contractAddresses: Array<Address>,
    POname: string,
    logoURL: string
  ): Address {
    let result = super.call(
      "createRegistry",
      "createRegistry(address,string[],address[],string,string):(address)",
      [
        ethereum.Value.fromAddress(_VotingControlAddress),
        ethereum.Value.fromStringArray(contractNames),
        ethereum.Value.fromAddressArray(contractAddresses),
        ethereum.Value.fromString(POname),
        ethereum.Value.fromString(logoURL)
      ]
    );

    return result[0].toAddress();
  }

  try_createRegistry(
    _VotingControlAddress: Address,
    contractNames: Array<string>,
    contractAddresses: Array<Address>,
    POname: string,
    logoURL: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createRegistry",
      "createRegistry(address,string[],address[],string,string):(address)",
      [
        ethereum.Value.fromAddress(_VotingControlAddress),
        ethereum.Value.fromStringArray(contractNames),
        ethereum.Value.fromAddressArray(contractAddresses),
        ethereum.Value.fromString(POname),
        ethereum.Value.fromString(logoURL)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateRegistryCall extends ethereum.Call {
  get inputs(): CreateRegistryCall__Inputs {
    return new CreateRegistryCall__Inputs(this);
  }

  get outputs(): CreateRegistryCall__Outputs {
    return new CreateRegistryCall__Outputs(this);
  }
}

export class CreateRegistryCall__Inputs {
  _call: CreateRegistryCall;

  constructor(call: CreateRegistryCall) {
    this._call = call;
  }

  get _VotingControlAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get contractNames(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get contractAddresses(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get POname(): string {
    return this._call.inputValues[3].value.toString();
  }

  get logoURL(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class CreateRegistryCall__Outputs {
  _call: CreateRegistryCall;

  constructor(call: CreateRegistryCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
