// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CandidateAdded extends ethereum.Event {
  get params(): CandidateAdded__Params {
    return new CandidateAdded__Params(this);
  }
}

export class CandidateAdded__Params {
  _event: CandidateAdded;

  constructor(event: CandidateAdded) {
    this._event = event;
  }

  get electionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get candidateIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get candidateAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get candidateName(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class ElectionConcluded extends ethereum.Event {
  get params(): ElectionConcluded__Params {
    return new ElectionConcluded__Params(this);
  }
}

export class ElectionConcluded__Params {
  _event: ElectionConcluded;

  constructor(event: ElectionConcluded) {
    this._event = event;
  }

  get electionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winningCandidateIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get hasValidWinner(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ElectionCreated extends ethereum.Event {
  get params(): ElectionCreated__Params {
    return new ElectionCreated__Params(this);
  }
}

export class ElectionCreated__Params {
  _event: ElectionCreated;

  constructor(event: ElectionCreated) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get electionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ElectionContract__createElectionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class ElectionContract__electionsResult {
  value0: boolean;
  value1: BigInt;
  value2: boolean;

  constructor(value0: boolean, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getIsActive(): boolean {
    return this.value0;
  }

  getWinningCandidateIndex(): BigInt {
    return this.value1;
  }

  getHasValidWinner(): boolean {
    return this.value2;
  }
}

export class ElectionContract__getCandidatesResultValue0Struct extends ethereum.Tuple {
  get candidateAddress(): Address {
    return this[0].toAddress();
  }

  get candidateName(): string {
    return this[1].toString();
  }
}

export class ElectionContract__getElectionDetailsResult {
  value0: boolean;
  value1: BigInt;
  value2: boolean;

  constructor(value0: boolean, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): boolean {
    return this.value2;
  }
}

export class ElectionContract__getElectionResultsResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): boolean {
    return this.value1;
  }
}

export class ElectionContract extends ethereum.SmartContract {
  static bind(address: Address): ElectionContract {
    return new ElectionContract("ElectionContract", address);
  }

  createElection(_proposalId: BigInt): ElectionContract__createElectionResult {
    let result = super.call(
      "createElection",
      "createElection(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_proposalId)],
    );

    return new ElectionContract__createElectionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_createElection(
    _proposalId: BigInt,
  ): ethereum.CallResult<ElectionContract__createElectionResult> {
    let result = super.tryCall(
      "createElection",
      "createElection(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_proposalId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ElectionContract__createElectionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  electionEnabled(): boolean {
    let result = super.call("electionEnabled", "electionEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_electionEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "electionEnabled",
      "electionEnabled():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  elections(param0: BigInt): ElectionContract__electionsResult {
    let result = super.call(
      "elections",
      "elections(uint256):(bool,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new ElectionContract__electionsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBoolean(),
    );
  }

  try_elections(
    param0: BigInt,
  ): ethereum.CallResult<ElectionContract__electionsResult> {
    let result = super.tryCall(
      "elections",
      "elections(uint256):(bool,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ElectionContract__electionsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBoolean(),
      ),
    );
  }

  getCandidates(
    electionId: BigInt,
  ): Array<ElectionContract__getCandidatesResultValue0Struct> {
    let result = super.call(
      "getCandidates",
      "getCandidates(uint256):((address,string)[])",
      [ethereum.Value.fromUnsignedBigInt(electionId)],
    );

    return result[0].toTupleArray<ElectionContract__getCandidatesResultValue0Struct>();
  }

  try_getCandidates(
    electionId: BigInt,
  ): ethereum.CallResult<
    Array<ElectionContract__getCandidatesResultValue0Struct>
  > {
    let result = super.tryCall(
      "getCandidates",
      "getCandidates(uint256):((address,string)[])",
      [ethereum.Value.fromUnsignedBigInt(electionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<ElectionContract__getCandidatesResultValue0Struct>(),
    );
  }

  getElectionDetails(
    electionId: BigInt,
  ): ElectionContract__getElectionDetailsResult {
    let result = super.call(
      "getElectionDetails",
      "getElectionDetails(uint256):(bool,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(electionId)],
    );

    return new ElectionContract__getElectionDetailsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBoolean(),
    );
  }

  try_getElectionDetails(
    electionId: BigInt,
  ): ethereum.CallResult<ElectionContract__getElectionDetailsResult> {
    let result = super.tryCall(
      "getElectionDetails",
      "getElectionDetails(uint256):(bool,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(electionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ElectionContract__getElectionDetailsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBoolean(),
      ),
    );
  }

  getElectionResults(
    electionId: BigInt,
  ): ElectionContract__getElectionResultsResult {
    let result = super.call(
      "getElectionResults",
      "getElectionResults(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(electionId)],
    );

    return new ElectionContract__getElectionResultsResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
    );
  }

  try_getElectionResults(
    electionId: BigInt,
  ): ethereum.CallResult<ElectionContract__getElectionResultsResult> {
    let result = super.tryCall(
      "getElectionResults",
      "getElectionResults(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(electionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ElectionContract__getElectionResultsResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
      ),
    );
  }

  nftMembership(): Address {
    let result = super.call("nftMembership", "nftMembership():(address)", []);

    return result[0].toAddress();
  }

  try_nftMembership(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nftMembership",
      "nftMembership():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalIdToElectionId(param0: BigInt): BigInt {
    let result = super.call(
      "proposalIdToElectionId",
      "proposalIdToElectionId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_proposalIdToElectionId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalIdToElectionId",
      "proposalIdToElectionId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingContract(): Address {
    let result = super.call("votingContract", "votingContract():(address)", []);

    return result[0].toAddress();
  }

  try_votingContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "votingContract",
      "votingContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _nftMembership(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _votingContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddCandidateCall extends ethereum.Call {
  get inputs(): AddCandidateCall__Inputs {
    return new AddCandidateCall__Inputs(this);
  }

  get outputs(): AddCandidateCall__Outputs {
    return new AddCandidateCall__Outputs(this);
  }
}

export class AddCandidateCall__Inputs {
  _call: AddCandidateCall;

  constructor(call: AddCandidateCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _candidateAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _candidateName(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class AddCandidateCall__Outputs {
  _call: AddCandidateCall;

  constructor(call: AddCandidateCall) {
    this._call = call;
  }
}

export class ConcludeElectionCall extends ethereum.Call {
  get inputs(): ConcludeElectionCall__Inputs {
    return new ConcludeElectionCall__Inputs(this);
  }

  get outputs(): ConcludeElectionCall__Outputs {
    return new ConcludeElectionCall__Outputs(this);
  }
}

export class ConcludeElectionCall__Inputs {
  _call: ConcludeElectionCall;

  constructor(call: ConcludeElectionCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get winningOption(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConcludeElectionCall__Outputs {
  _call: ConcludeElectionCall;

  constructor(call: ConcludeElectionCall) {
    this._call = call;
  }
}

export class CreateElectionCall extends ethereum.Call {
  get inputs(): CreateElectionCall__Inputs {
    return new CreateElectionCall__Inputs(this);
  }

  get outputs(): CreateElectionCall__Outputs {
    return new CreateElectionCall__Outputs(this);
  }
}

export class CreateElectionCall__Inputs {
  _call: CreateElectionCall;

  constructor(call: CreateElectionCall) {
    this._call = call;
  }

  get _proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateElectionCall__Outputs {
  _call: CreateElectionCall;

  constructor(call: CreateElectionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
