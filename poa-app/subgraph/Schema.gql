
##DDtoken

type DDTokenCreated @entity {
  id: ID!
  tokenAddress: Bytes!
  name: String!
  symbol: String!
  POname: String!
  allowedRoleNames: [DDAllowedRoleName!]! @derivedFrom(field: "tokenCreated")
}

type DDAllowedRoleName @entity {
  id: ID!
  roleName: String!
  tokenCreated: DDTokenCreated! @link
}

type DDToken @entity {
  id: ID!
  tokenAddress: Bytes!
  name: String!
  symbol: String!
  POname: String!
  mintEvents: [DDTokenMintEvent!]! @derivedFrom(field: "token")
}

type DDTokenMintEvent @entity {
  id: ID!
  token: DDToken! @link
  to: Bytes!
  amount: BigInt!
}

##participation token 
type PTTokenCreated @entity {
  id: ID!
  tokenAddress: Bytes!
  name: String!
  symbol: String!
  POname: String!
  allowedRoleNames: [PTAllowedRoleName!]! @derivedFrom(field: "tokenCreated")
}

type PTAllowedRoleName @entity {
  id: ID!
  roleName: String!
  tokenCreated: PTTokenCreated! @link
}

type PTToken @entity {
  id: ID!
  tokenAddress: Bytes!
  name: String!
  symbol: String!
  POname: String!
  mintEvents: [PTTokenMintEvent!]! @derivedFrom(field: "token")
  taskManagerAddress: Bytes
}

type PTTokenMintEvent @entity {
  id: ID!
  token: PTToken! @link
  to: Bytes!
  amount: BigInt!
}



##nft 

type NFTMembershipCreated @entity {
  id: ID!
  contractAddress: Bytes!
  memberTypeNames: [String!]!
  defaultImageURL: String!
  POname: String!
}

type NFTMembership @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
  memberTypeNames: [String!]!
  defaultImageURL: String!
  mintEvents: [NFTMintEvent!]! @derivedFrom(field: "membership")
  changeTypeEvents: [NFTChangeTypeEvent!]! @derivedFrom(field: "membership")
}

type NFTMemberType @entity {
  id: ID!
  memberTypeName: String!
  imageURL: String!
  membership: NFTMembership! @link
}

type NFTMintEvent @entity {
  id: ID!
  membership: NFTMembership! @link
  recipient: Bytes!
  memberTypeName: String!
  tokenURI: String!
}

type NFTChangeTypeEvent @entity {
  id: ID!
  membership: NFTMembership! @link
  user: Bytes!
  newMemberType: String!
}

## treasury 

type Treasury @entity {
  id: ID!
  POname: String!
  treasuryAddress: Bytes!
  votingContract: Bytes
}

type TreasuryCreated @entity {
  id: ID!
  POname: String!
  treasuryAddress: Bytes!
}

## parcitipation voting 

type PTVotingCreated @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
}

type PTVoting @entity {
  id: ID!
  contract: PTVotingCreated! @link
  POname: String!
  proposals: [PTProposal!]! @derivedFrom(field: "voting")
}

type PTProposal @entity {
  id: ID!
  name: String!
  voting: PTVoting! @link
  description: String!
  totalVotes: BigInt!
  timeInMinutes: BigInt!
  creationTimestamp: BigInt!
  experationTimestamp: BigInt!
  transferTriggerOptionIndex: BigInt
  transferRecipient: Bytes
  transferAmount: BigInt
  transferEnabled: Boolean!
  options: [PTPollOption!] @derivedFrom(field: "proposal")
  votes: [PTVote!] @derivedFrom(field: "proposal")
  winningOptionIndex: BigInt
}

type PTPollOption @entity {
  id: ID!
  proposal: PTProposal! @link
  name: String!
  votes: BigInt!
}

type PTVote @entity {
  id: ID!
  proposal: PTProposal! @link
  voter: Bytes! 
  optionIndex: BigInt!
  voteWeight: BigInt!
}

## dd voting

type DDVotingCreated @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
}

type DDVoting @entity {
  id: ID!
  contract: DDVotingCreated! @link
  POname: String!
  proposals: [DDProposal!]! @derivedFrom(field: "voting")
}

type DDProposal @entity {
  id: ID!
  name: String!
  voting: DDVoting! @link
  description: String!
  totalVotes: BigInt!
  timeInMinutes: BigInt!
  creationTimestamp: BigInt!
  transferTriggerOptionIndex: BigInt
  transferRecipient: Bytes
  transferAmount: BigInt
  transferEnabled: Boolean!
  options: [DDPollOption!] @derivedFrom(field: "proposal")
  votes: [DDVote!] @derivedFrom(field: "proposal")
  winningOptionIndex: BigInt
}

type DDPollOption @entity {
  id: ID!
  proposal: DDProposal! @link
  name: String!
  votes: BigInt!
}

type DDVote @entity {
  id: ID!
  proposal: DDProposal! @link
  voter: Bytes! 
  optionIndex: BigInt!
  voteWeight: BigInt!
}

## hybrid voting 

type HybridVotingCreated @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
}

type HybridVoting @entity {
  id: ID!
  contract: HybridVotingCreated! @link
  POname: String!
  proposals: [HybridProposal!]! @derivedFrom(field: "voting")
}

type HybridProposal @entity {
  id: ID!
  name: String!
  voting: HybridVoting! @link
  description: String!
  totalVotes: BigInt!
  timeInMinutes: BigInt!
  creationTimestamp: BigInt!
  transferTriggerOptionIndex: BigInt
  transferRecipient: Bytes
  transferAmount: BigInt
  transferEnabled: Boolean!
  options: [HybridPollOption!] @derivedFrom(field: "proposal")
  votes: [HybridVote!] @derivedFrom(field: "proposal")
  winningOptionIndex: BigInt
}

type HybridPollOption @entity {
  id: ID!
  proposal: HybridProposal! @link
  name: String!
  votes: BigInt!
}

type HybridVote @entity {
  id: ID!
  proposal: HybridProposal! @link
  voter: Bytes! 
  optionIndex: BigInt!
  voteWeightPT: BigInt!
  voteWeightDD: BigInt!
}

## task manager 

type TaskManagerCreated @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
}

type TaskManager @entity {
  id: ID!
  contract: TaskManagerCreated! @link
  POname: String!
  projects: [Project!] @derivedFrom(field: "taskManager")
}

type Task @entity {
  id: ID!
  taskManager: TaskManager! @link
  ipfsHash: String!
  payout: BigInt!
  project: Project! @link
  claimer: Bytes
  completed: Boolean!
}

type Project @entity {
  id: ID!
  taskManager: TaskManager! @link
  name: String!
  tasks: [Task!] @derivedFrom(field: "project")
  deleted: Boolean!
}

## registry 

type RegistryCreated @entity {
  id: ID!
  contractAddress: Bytes!
  POname: String!
}

type Registry @entity {
  id: ID!
  contract: RegistryCreated! @link
  POname: String!
  votingContract: Bytes
  validContracts: [ValidContract!] @derivedFrom(field: "registry")
  logoURL: String
}

type ValidContract @entity {
  id: ID!
  contractAddress: Bytes!
  registry: Registry! @link
  name: String!
}



## Perpetual Organization info 



type PerpetualOrganization @entity {
  id: ID!
  name: String!
  NFTMembership: NFTMembership! @link
  registry: Registry @link
  DirectDemocracyToken: DDToken @liknk
  ParticipationToken: PTToken @link
  Treasury: Treasury @link
  TaskManager: TaskManager @link
  ParticipationVoting: PTVoting @link
  DirectDemocracyVoting: DDVoting @link
  HybridVoting: HybridVoting @link
  Users: [User!] @derivedFrom(field: "organization")
}

type User @entity {
  id: ID!
  organization: PerpetualOrganization! @link
  address: Bytes!
  ddTokenBalance: BigInt!
  ptTokenBalance: BigInt!
  memberType: NFTMemberType @link
}





